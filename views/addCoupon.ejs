<%- include('include/adminBase.ejs') %>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.4.2/mdb.min.css" rel="stylesheet" />

<style>
  .errorP {
    color: red;
    font-size: small;
  }
</style>

<section id="content">
  <main>
    <div class="table-data">
      <div class="order">
        <div class="head">
          <h3>Add Coupon</h3>
          <a href="/admin-Coupon">
            <button class="btn btn-rounded" style="background-color: #131921; color: white;">
              <i class='bx bx-exit'></i>Go Back
            </button>
          </a>
        </div>
        <div class="container coupon-container">
          <form action="/add-Coupon" method="post" id="coupon-form">
            <div class="form-group">
              <label for="coupon-code">Coupon Code</label>
              <input type="text" class="form-control" id="coupon-code" placeholder="Enter Coupon Code" name="couponCode">
              <small id="coupon-code-error" class="text-danger"></small>
              <p class="errorP <%= !couponCodeError ? 'd-none' : '' %>"><%= couponCodeError %></p>
              <p class="errorP <%= !couponCodeRegex ? 'd-none' : '' %>"><%= couponCodeRegex %></p>
              <p class="errorP <%= !couponExists ? 'd-none' : '' %>"><%= couponExists %></p>
            </div>
            <div class="form-group">
              <label for="discount">Discount (%)</label>
              <input type="number" class="form-control" id="discount" placeholder="Enter Discount Percentage" name="discount">
              <small id="discount-error" class="text-danger"></small>
              <p class="errorP <%= !discountError ? 'd-none' : '' %>"><%= discountError %></p>
              <p class="errorP <%= !discountRegex ? 'd-none' : '' %>"><%= discountRegex %></p>
            </div>
            <div class="form-group">
              <label for="category">Category</label>
              <select class="form-control" id="category" name="category">
                <option value="" disabled selected>Select Category</option>
                <% categories.forEach(category => { %>
                  <option value="<%= category.name %>"><%= category.name %></option>
                <% }); %>
              </select>
              <small id="category-error" class="text-danger"></small>
              <p class="errorP <%= !categoryError ? 'd-none' : '' %>"><%= categoryError %></p>
            </div>
            <div class="form-group">
              <label for="max-amount">Max Amount</label>
              <input type="number" class="form-control" id="max-amount" placeholder="Enter Max Amount" name="maxAmount">
              <small id="max-amount-error" class="text-danger"></small>
              <p class="errorP <%= !maxAmountError ? 'd-none' : '' %>"><%= maxAmountError %></p>
              <p class="errorP <%= !maxAmountRegex ? 'd-none' : '' %>"><%= maxAmountRegex %></p>
            </div>
            <div class="form-group">
              <label for="valid-from">Valid From</label>
              <input type="date" class="form-control" id="valid-from" name="validFrom">
              <small id="valid-from-error" class="text-danger"></small>
              <p class="errorP <%= !validFromError ? 'd-none' : '' %>"><%= validFromError %></p>
              <p class="errorP <%= !validFrom ? 'd-none' : '' %>"><%= validFrom %></p>
            </div>
            <div class="form-group">
              <label for="valid-to">Valid To</label>
              <input type="date" class="form-control" id="valid-to" name="validTo">
              <small id="valid-to-error" class="text-danger"></small>
              <p class="errorP <%= !validToError ? 'd-none' : '' %>"><%= validToError %></p>
              <p class="errorP <%= !validTo ? 'd-none' : '' %>"><%= validTo %></p>
            </div>
            <button type="submit" class="btn" style="background-color: #131921; color: white;">Add Coupon</button>
          </form>
        </div>
      </div>
    </div>
  </main>
</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('coupon-form').addEventListener('submit', function (event) {
      // Perform validation checks
      if (!validateForm()) {
        // Prevent form submission if validation fails
        event.preventDefault();
      }
    });

    // Validate form inputs
    function validateForm() {
      const couponCode = document.getElementById('coupon-code').value.trim();
      const discount = document.getElementById('discount').value.trim();
      const maxAmount = document.getElementById('max-amount').value.trim();
      const validFrom = document.getElementById('valid-from').value;
      const validTo = document.getElementById('valid-to').value;
      const today = new Date().toISOString().split('T')[0];

      let valid = true;

      // Validate coupon code (Alphanumeric)
      const couponCodeRegex = /^[a-zA-Z0-9]+$/;
      if (!couponCodeRegex.test(couponCode)) {
        showAlert("Coupon code should be Alphabetic and Numeric");
        valid = false;
      }

      // Validate discount (Numeric and within range)
      const discountValue = parseInt(discount);
      if (isNaN(discountValue)) {
        showAlert("Discount should be a numeric value.");
        valid = false;
      }

      // Validate max amount (Numeric and within range)
      const maxAmountValue = parseInt(maxAmount);
      if (isNaN(maxAmountValue) || maxAmountValue < 10000) {
        showAlert("Maximum Amount should be greater than or equal to 10000");
        valid = false;
      }

      // Validate valid from date
      if (!validFrom) {
        showAlert("Valid from date is required");
        valid = false;
      } else if (validFrom < today||validFrom > today) {
        showAlert("Valid from date should not be in the past or future.");
        valid = false;
      }

      // Validate valid to date
      if (!validTo) {
        showAlert("Valid to date is required");
        valid = false;
      } else if (validTo < validFrom) {
        showAlert("Valid to date should not be before the valid from date.");
        valid = false;
      }

      return valid;
    }

    // Function to show SweetAlert2 alert
    function showAlert(message) {
      Swal.fire({
        icon: 'error',
        title: 'Validation Error',
        text: message,
      });
    }
  });
</script>
