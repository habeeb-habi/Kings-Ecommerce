<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product</title>
  <link rel="icon" type="image/x-icon" href="/images/fav-icon.png">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.4.2/mdb.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <style>
    /* Existing styles */
    .errorP {
      color: red;
      font-size: small;
    }
    .image-container {
      position: relative;
      display: inline-block;
      margin: 5px;
    }
    .edit-icon, .remove-icon {
      position: absolute;
      top: 5px;
      right: 5px;
      cursor: pointer;
    }
    .remove-icon {
      right: 30px;
      color: red; /* Add color to the remove icon */
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
      background-color: rgba(0, 0, 0, 0.4);
      padding-top: 20px;
    }
    .modal-content {
      background-color: #fefefe;
      margin: 5% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      max-width: 600px;
      max-height: 80%;
      overflow: auto;
      position: relative;
      box-sizing: border-box;
    }
    #cropperImage {
      width: 100%;
      max-height: 300px;
      display: block;
      margin: 0 auto;
    }
    .modal-content img {
      display: block;
      max-width: 100%;
      height: auto;
    }
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }
    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }
    button {
      margin-top: 10px;
      align-self: center;
    }
  
    /* New styles */
    .remove-icon {
      color: rgb(248, 71, 71); /* Change remove icon color to red */
    }
    #saveCroppedImage {
      background-color: rgb(81, 81, 255); /* Set background color to blue */
      color: white; /* Set text color to white */
      border: none; /* Remove border */
    }
    #saveCroppedImage:hover {
      background-color:rgb(81, 81, 255); /* Darker blue on hover */
    }
    .edit-icon {
      color: rgb(81, 81, 255); /* Change edit icon color to blue */
    }
  </style>  
</head>
<body style="background-color:#f5f5f7;">
  <%- include('../include/adminHead') %>
  
  <div class="container mt-5">
    <div class="card mb-4">
      <div class="card-header py-3">
        <h5 class="mb-0">Add Product</h5>
      </div>
      <div class="card-body">
        <form id="addProductForm" action="/api/add-Products" method="POST" enctype="multipart/form-data">
          <div class="p-4">
            <h5 class="card-title mb-3">Product Details</h5>
            <div class="row">
              <div class="col-sm-8 mb-3">
                <label for="productName" class="form-label">Product Name</label>
                <input type="text" name="pName" class="form-control" id="productName" placeholder="Enter Product Name">
                <p class="errorP <%= !pNameRegexerror?'d-none':'' %>"><%=pNameRegexerror %></p>
              </div>
              <div class="col-sm-8 mb-3">
                <label for="productDescription" class="form-label">Description</label>
                <input type="text" name="description" class="form-control" id="productDescription" placeholder="Enter Description">
                <p class="errorP <%= !descriptionRegexerror?'d-none':'' %>"><%=descriptionRegexerror %></p>
              </div>
              <div class="col-sm-4 mb-3">
                <label for="productPrice" class="form-label">Product Price</label>
                <input type="number" name="price" class="form-control" id="productPrice" placeholder="Enter Product Price">
                <p class="errorP <%= !priceRegexerror?'d-none':'' %>"><%=priceRegexerror %></p>
              </div>
              <div class="col-sm-4 mb-3">
                <label for="productStock" class="form-label">Add Stock</label>
                <input type="number" name="stock" class="form-control" id="productStock" placeholder="Enter Product Stock">
                <p class="errorP <%= !stockRegexerror?'d-none':'' %>"><%=stockRegexerror %></p>
              </div>
              <div class="col-sm-4 mb-3">
                <label for="productDiscount" class="form-label">Add Discount (%)</label>
                <input type="number" name="discount" class="form-control" id="productDiscount" placeholder="Enter Product Discount">
                <p class="errorP <%= !discountRegexerror?'d-none':'' %>"><%=discountRegexerror %></p>
              </div>
              <div class="col-sm-4 mb-3">
                <label for="productCategory" class="form-label">Category</label>
                <select name="category" id="productCategory" class="form-control">
                  <option value="">Select Category</option>
                  <% for(let i=0;i<data.length;i++){ %>
                    <option><%= data[i].name %></option>
                  <% } %>
                </select>
                <p class="errorP <%= !categoryError?'d-none':'' %>"><%=categoryError %></p>
              </div>
              <div class="col-sm-12 mb-3">
                <label for="productImage" class="form-label">Product Image</label>
                <input type="file" id="productImage" name="image" multiple accept="image/*" class="form-control-file">
                <div id="imagePreview" class="mt-2 d-flex flex-wrap gap-2"></div>
                <p class="errorP <%= !imageError?'d-none':'' %>"><%=imageError %></p>
              </div>
              <div class="float-end">
                <button type="submit" class="btn btn-primary" onclick="submitForm()">Continue</button>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <div id="cropperModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <img id="cropperImage" src="" alt="Image for cropping">
      <button id="saveCroppedImage" class="btn btn-primary">Save</button>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.4.2/mdb.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('addProductForm');
        const productImage = document.getElementById('productImage');
        const imagePreview = document.getElementById('imagePreview');
        const cropperModal = document.getElementById('cropperModal');
        const cropperImage = document.getElementById('cropperImage');
        const closeModal = document.querySelector('.close');
        const saveCroppedImage = document.getElementById('saveCroppedImage');
        let cropper;
        let imageFiles = [];
        let currentIndex = -1;
    
        // Handle form submission
        form.addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent default form submission
            if (validateForm() && imageFiles.length >= 4) {
                form.submit(); // Submit form if validation passes and at least 4 images are uploaded
            } else if (imageFiles.length < 4) {
                Swal.fire({
                    icon: 'error',
                    title: 'Insufficient Images',
                    text: 'Please upload at least four images.',
                });
            }
        });
    
        function validateForm() {
            const productName = document.getElementById('productName').value.trim();
            const productDescription = document.getElementById('productDescription').value.trim();
            const productPrice = parseFloat(document.getElementById('productPrice').value.trim());
            const productStock = parseInt(document.getElementById('productStock').value.trim());
            const productDiscount = parseFloat(document.getElementById('productDiscount').value.trim());
            const productCategory = document.getElementById('productCategory').value.trim();
    
            let valid = true;
    
            // Validate product name (3-70 alphabetic characters)
            const productNameRegex = /^[a-zA-Z\s]{3,70}$/;
            if (!productNameRegex.test(productName)) {
                showAlert('Product name should be between 3 and 70 alphabetic characters.');
                valid = false;
            }
    
            // Validate product description (3-200 characters)
            if (productDescription.length < 3 || productDescription.length > 200) {
                showAlert('Description should be between 3 and 200 characters.');
                valid = false;
            }
    
            // Validate product price (positive number)
            if (isNaN(productPrice) || productPrice <= 0) {
                showAlert('Price should be a positive number.');
                valid = false;
            }
    
            // Validate product stock (positive integer)
            if (isNaN(productStock) || productStock <= 0) {
                showAlert('Stock should be a positive integer.');
                valid = false;
            }
    
            // Validate product discount (between 10 and 90 percent)
            if (isNaN(productDiscount) || productDiscount < 10 || productDiscount > 90) {
                showAlert('Discount should be between 10% and 90%.');
                valid = false;
            }
    
            // Validate product category (should not be empty)
            if (productCategory === "") {
                showAlert('Please select a category.');
                valid = false;
            }
    
            return valid;
        }
    
        // Function to show SweetAlert2 alert
        function showAlert(message) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: message,
            });
        }
    
        // Handle image upload
        productImage.addEventListener('change', async (e) => {
            const files = Array.from(e.target.files);
            await resetPreview(files, true);
        });
    
        closeModal.addEventListener('click', () => {
            cropperModal.style.display = 'none';
            cropper.destroy();
        });
    
        saveCroppedImage.addEventListener('click', () => {
            const canvas = cropper.getCroppedCanvas();
            canvas.toBlob(async (blob) => {
                const croppedFile = new File([blob], imageFiles[currentIndex].name, { type: imageFiles[currentIndex].type });
                imageFiles.splice(currentIndex, 1, croppedFile);
                updateImageInputFiles();
                await resetPreview(imageFiles, false);
                cropperModal.style.display = 'none';
                cropper.destroy();
            });
        });
    
        async function resetPreview(files, inputEvent = false) {
            if (inputEvent) {
                imageFiles.push(...files);
            }
    
            if (imageFiles.length > 4) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Limit Exceeded',
                    text: 'Only the first four images will be uploaded.',
                });
                imageFiles = imageFiles.slice(0, 4);
                productImage.value = '';
                return;
            }
    
            imagePreview.innerHTML = '';
            imageFiles.forEach((file, index) => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = () => {
                        const imgContainer = document.createElement('div');
                        imgContainer.classList.add('image-container');
    
                        const img = document.createElement('img');
                        img.src = reader.result;
                        img.classList.add('preview-image');
                        img.onload = () => {
                            if (img.width > 150 || img.height > 150) {
                                if (img.width > img.height) {
                                    img.style.width = '150px';
                                    img.style.height = 'auto';
                                } else {
                                    img.style.height = '150px';
                                    img.style.width = 'auto';
                                }
                            }
                        };
    
                        const removeIcon = document.createElement('i');
                        removeIcon.classList.add('fas', 'fa-times-circle', 'remove-icon');
                        removeIcon.addEventListener('click', () => {
                            imageFiles.splice(index, 1);
                            updateImageInputFiles();
                            resetPreview(imageFiles, false);
                        });
    
                        const editIcon = document.createElement('i');
                        editIcon.classList.add('fas', 'fa-edit', 'edit-icon');
                        editIcon.addEventListener('click', () => {
                            cropperImage.src = reader.result;
                            cropperModal.style.display = 'block';
                            currentIndex = index;
                            cropper = new Cropper(cropperImage, {
                                aspectRatio: 400 / 550,
                                viewMode: 1,
                            });
                        });
    
                        imgContainer.appendChild(img);
                        imgContainer.appendChild(removeIcon);
                        imgContainer.appendChild(editIcon);
                        imagePreview.appendChild(imgContainer);
                    };
                    reader.readAsDataURL(file);
                }
            });
    
            updateImageInputFiles();
        }
    
        function updateImageInputFiles() {
            const dataTransfer = new DataTransfer();
            imageFiles.forEach((file) => dataTransfer.items.add(file));
            productImage.files = dataTransfer.files;
        }
    });
    </script>
</body>
</html>
