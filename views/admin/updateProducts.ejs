<!-- include header -->
<%- include('../include/adminHead') %>
<!-- /include header -->

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<!-- MDB -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.4.2/mdb.min.css" rel="stylesheet" />
<link rel="stylesheet" href="/path/to/your/css/dist/themes/toasteur-default.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
<link rel="icon" type="image/x-icon" href="/images/fav-icon.png">

<style>
  .errorP {
      color: red;
      font-size: small;
  }

  /* Modal Styles */
  .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
      background-color: rgba(0, 0, 0, 0.4);
      padding-top: 20px;
  }

  .modal-content {
      background-color: #fefefe;
      margin: 5% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      max-width: 600px;
      max-height: 80%;
      overflow: auto;
      position: relative;
      box-sizing: border-box;
  }

  /* Image Styles */
  #cropperImage {
      width: 100%;
      max-height: 300px;
      display: block;
      margin: 0 auto;
  }

  .modal-content img {
      display: block;
      max-width: 100%;
      height: auto;
  }

  .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
  }

  .close:hover,
  .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
  }

  button {
      margin-top: 10px;
      align-self: center;
  }
</style>

<div class="row">
  <div class="col-md-8 mb-4 mx-auto mb-4 mt-5">
    <div class="card mb-4" style="background-color:#f5f5f7;">
      <div class="card-header py-3">
        <h5 class="mb-0">Update products</h5>
      </div>
      <div class="card-body">
        <form action="/api/update-product" method="POST" id="updateProductForm">
          <div class="card shadow-0">
            <div class="p-4" style="background-color:#f5f5f7;">
              <h5 class="card-title mb-3" style="background-color:#f5f5f7;">Product details</h5>
              <div class="row">
                <div class="col-sm-8 mb-3">
                  <p class="mb-0">Product name</p>
                  <div class="form-outline">
                    <input type="text" name="id" class="form-control" value="<%= products._id %>" style="display: none;">
                    <input type="text" name="pName" class="form-control" id="productName" placeholder="Enter Product Name" value="<%= products.pName %>">
                  </div>
                  <p class="errorP <%= !pNameRegexerror2 ? 'd-none' : '' %>"><%= pNameRegexerror2 %></p>
                </div>
                <div class="col-sm-8 mb-3">
                  <p class="mb-0">Description</p>
                  <div class="form-outline">
                    <textarea name="description" class="form-control" placeholder="Enter Product Description" id="productDescription"><%= products.description %></textarea>
                  </div>
                  <p class="errorP <%= !descriptionRegexerror2 ? 'd-none' : '' %>"><%= descriptionRegexerror2 %></p>
                </div>
                <div class="col-sm-4 mb-3">
                  <p class="mb-0">Product price</p>
                  <div class="form-outline">
                    <input type="number" name="price" class="form-control" id="productPrice" placeholder="Enter Product Price" value="<%= products.price %>">
                  </div>
                  <p class="mb-0" id="PriceWarning" style="display: none; color: red;">Price should be positive value</p>
                  <p class="errorP <%= !priceRegexerror2 ? 'd-none' : '' %>"><%= priceRegexerror2 %></p>
                  <p class="errorP <%= !generalError ? 'd-none' : '' %>"><%= generalError %></p>
                </div>
                <div class="col-sm-4 mb-3">
                  <p class="mb-0">Add Stock</p>
                  <div class="form-outline">
                    <input type="number" name="stock" class="form-control" id="productStock" placeholder="Enter Product Stock" value="<%= products.stock %>">
                  </div>
                  <p class="mb-0" id="PriceStock" style="display: none; color: red;">Stock should be positive value</p>
                  <p class="errorP <%= !stockRegexerror2 ? 'd-none' : '' %>"><%= stockRegexerror2 %></p>
                  <p class="errorP <%= !generalError ? 'd-none' : '' %>"><%= generalError %></p>
                </div>
                <div class="col-sm-4 col-6 mb-3">
                  <p class="mb-0">Add Discount(%)</p>
                  <div class="form-outline">
                    <input type="number" name="discount" class="form-control" id="productDiscount" placeholder="Enter Product Discount" value="<%= products.discount %>">
                  </div>
                  <p class="mb-0" id="PriceDiscount" style="display: none; color: red;">Discount should be less than 90% and above 0%</p>
                  <p class="errorP <%= !discountRegexerror2 ? 'd-none' : '' %>"><%= discountRegexerror2 %></p>
                  <p class="errorP <%= !generalError ? 'd-none' : '' %>"><%= generalError %></p>
                </div>
                <div class="col-sm-4 mb-3">
                  <p class="mb-0">Category</p>
                  <div class="form-outline">
                    <select name="category" id="productCategory" class="form-control">
                      <option value=""><%= categoryName %></option>
                      <% for(let i = 0; i < data.length; i++) { %>
                        <option value="<%= data[i].name %>" <%= products.name === data[i].name ? 'selected' : '' %>><%= data[i].name %></option>
                      <% } %>
                    </select>
                  </div>
                  <p class="errorP <%= !categoryError2 ? 'd-none' : '' %>"><%= categoryError2 %></p>
                </div>
              </div>
              <div class="float-end">
                <button type="submit" class="btn btn-dark shadow-0 border" style="background-color: #00c2ff59;">Continue</button>
              </div>
            </div>
          </div>
        </form>

        <!-- Image Upload Form -->
        <div class="mt-5">
          <h5>Add Images</h5>
          <br>
          <form action="/upload-image?id=<%= id %>" method="post" enctype="multipart/form-data">
            <div class="form-group">
              <label for="image">Select Images:</label>
              <input type="file" class="form-control-file" id="image" name="image" multiple accept="image/*">
            </div>
            <p class="errorP <%= !imageError2 ? 'd-none' : '' %>"><%= imageError2 %></p>
            <br>
            <button type="submit" class="btn btn-primary">Upload Images</button>
          </form>

          <!-- Image Preview Section -->
          <div class="mt-4">
            <h5>Image Preview:</h5>
            <div id="imagePreview" class="d-flex flex-wrap">
                <!-- Existing image containers with Remove buttons -->
                <% for (let i = 0; i < images.length; i++) { %>
                    <div id="image-container-<%= images[i] %>" class="image-container d-inline-block">
                        <img src="/images/<%= images[i] %>" alt="" class="img-thumbnail m-2" style="width: 150px; height: 150px;">
                        <button type="button" class="btn btn-danger btn-sm btn-remove-image" onclick="deleteImage('<%= images[i] %>')">Remove</button>
                    </div>
                <% } %>
            </div>
        </div>
        

          <!-- Cropper Modal -->
          <div id="cropperModal" class="modal">
            <div class="modal-content">
              <span class="close">&times;</span>
              <img id="cropperImage" src="" alt="Image to crop">
              <button id="cropButton" class="btn btn-primary">Crop</button>
            </div>
          </div>

          <!-- Scripts -->
          <script src="dist/toasteur.min.js"></script>
          <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
          <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.4.2/mdb.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('updateProductForm');

    // Handle form submission
    form.addEventListener('submit', function (event) {
        // Prevent form submission if validation fails
        if (!validateForm()) {
            event.preventDefault();
        }
    });

    // Validate form inputs
    function validateForm() {
        const productName = document.getElementById('productName').value.trim();
        const productDescription = document.getElementById('productDescription').value.trim();
        const productPrice = parseFloat(document.getElementById('productPrice').value.trim());
        const productStock = parseInt(document.getElementById('productStock').value.trim());
        const productDiscount = parseFloat(document.getElementById('productDiscount').value.trim());
        const productCategory = document.getElementById('productCategory').value.trim();

        let valid = true;

        // Validate product name (3-70 alphabetic characters)
        if (!/^[a-zA-Z\s]{3,70}$/.test(productName)) {
            showAlert('Product name should be between 3 and 70 alphabetic characters.');
            valid = false;
        }

        // Validate product description length (3-2000 characters)
        if (productDescription.length < 3 || productDescription.length > 2000) {
            showAlert('Description should be between 3 and 2000 characters.');
            valid = false;
        }

        // Validate product price (positive number)
        if (isNaN(productPrice) || productPrice <= 0) {
            showAlert('Price should be a positive number.');
            valid = false;
        }

        // Validate product stock (positive integer)
        if (isNaN(productStock) || productStock <= 0) {
            showAlert('Stock should be a positive integer.');
            valid = false;
        }

        // Validate product discount (0-90 percent)
        if (isNaN(productDiscount) || productDiscount < 0 || productDiscount > 90) {
            showAlert('Discount should be between 0% and 90%.');
            valid = false;
        }

        // Validate product category (non-empty)
        if (productCategory === "") {
            showAlert('Please select a category.');
            valid = false;
        }

        return valid;
    }

    // Function to show SweetAlert2 alert
    function showAlert(message) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: message,
        });
    }

   // Function to delete image
window.deleteImage = function (imageName) {
    // Display a SweetAlert confirmation dialog
    Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to remove the image "${imageName}"? This action cannot be undone.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Delete'
    }).then((result) => {
        if (result.isConfirmed) {
            // Remove image from preview
            var imageContainer = document.getElementById(`image-container-${imageName}`);
            if (imageContainer) {
                imageContainer.remove();
            }
            console.log(imageContainer)
            // Extract the product ID from the form action attribute
            const formAction = document.querySelector('form[action^="/upload-image"]').getAttribute('action');
            const idMatch = formAction.match(/id=(\w+)/);
            const id = idMatch ? idMatch[1] : null;
            console.log(imageName,id)
            // Make an AJAX request to update server-side data
            $.ajax({
                url: `/remove-image?id=${id}`,  // Include id in the query parameters
                method: 'POST',
                data: { filename: imageName },
                success: function (response) {
                    console.log('Image removed successfully on the server');
                    Swal.fire('Deleted!', 'The image has been deleted successfully.', 'success');
                },
                error: function (error) {
                    console.error('Error removing image on the server:', error);
                    Swal.fire('Error!', 'Failed to delete the image.', 'error');
                }
            });
        }
    });
};


    const productImage = document.getElementById('image');
    const imagePreview = document.getElementById('imagePreview');

    productImage.addEventListener('change', function () {
        const files = Array.from(productImage.files);

        // Clear the image preview container
        imagePreview.innerHTML = '';

        // Only process the first four images
        const limitedFiles = files.slice(0, 4);

        // Iterate through the selected files
        limitedFiles.forEach((file, index) => {
            // Create a FileReader instance
            const reader = new FileReader();

            // Create an image element
            const img = document.createElement('img');
            img.style.width = '100px';
            img.style.height = '100px';
            img.style.objectFit = 'cover';
            img.className = 'img-thumbnail';
            img.alt = `Image Preview ${index + 1}`;

            // Create a container div for the image and the remove button
            const imageContainer = document.createElement('div');
            imageContainer.style.display = 'inline-block';
            imageContainer.style.margin = '5px';

            // Create the remove button
            const removeButton = document.createElement('button');
            removeButton.textContent = 'Remove';
            removeButton.className = 'btn btn-danger btn-sm';
            removeButton.style.display = 'block';
            removeButton.addEventListener('click', function () {
                // Remove the container div from the preview container
                imagePreview.removeChild(imageContainer);

                // Create a new DataTransfer object
                const dataTransfer = new DataTransfer();

                // Loop through the files and add back only those not being removed
                limitedFiles.forEach((f, idx) => {
                    if (idx !== index) {
                        dataTransfer.items.add(f);
                    }
                });

                // Update the file input's file list
                productImage.files = dataTransfer.files;
            });

            // Read the file as a data URL and set it as the image source
            reader.onload = function (e) {
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);

            // Append the image and remove button to the container div
            imageContainer.appendChild(img);
            imageContainer.appendChild(removeButton);

            // Append the container div to the preview container
            imagePreview.appendChild(imageContainer);
        });

        // Show an alert if more than 4 files are selected
        if (productImage.files.length > 4) {
            Swal.fire({
                icon: 'warning',
                title: 'Limit Exceeded',
                text: 'Only the first four images will be uploaded.',
            });
            productImage.value = ''; // Reset the file input
        }
    });
});

</script>
