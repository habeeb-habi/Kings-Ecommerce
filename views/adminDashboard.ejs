<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
    <!-- Include Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
    />
  </head>
  <body>
    <!-- include adminBase -->
    <%- include('include/adminBase.ejs') %>
    <!-- include adminBase -->

    <!-- CONTENT -->
    <section id="content">
      <main>
        <div class="head-title">
          <div class="left">
            <h1>Dashboard</h1>
            <ul class="breadcrumb">
              <li>
                <a href="#">Admin Dashboard</a>
              </li>
              <li><i class="bx bx-chevron-right"></i></li>
              <li>
                <a class="active" href="#">Home</a>
              </li>
            </ul>
          </div>
          <button type="button" class="btn-download">
            <i class="bx bxs-cloud-download"></i>
            <span class="text">Download Excel</span>
          </button>
        </div>
        <ul class="box-info">
          <a href="/admin-Orders">
            <li>
              <i class="bx bxs-calendar-check"></i>
              <span class="text">
                <h3 class="counter"><%= orderCount %></h3>
                <p>Total Orders</p>
              </span>
            </li>
          </a>
          <a href="/admin-Users">
            <li>
              <i class="bx bxs-group"></i>
              <span class="text">
                <h3 class="counter"><%= userCount %></h3>
                <p>Total Users</p>
              </span>
            </li>
          </a>
          <li>
            <i class="bx bxs-dollar-circle"></i>
            <span class="text">
              <h3 class="counter"><%= totalSalesCount %></h3>
              <p>Total Sales</p>
            </span>
          </li>
        </ul>

        <div class="dropdown">
          <button
            class="btn btn-secondary dropdown-toggle"
            type="button"
            id="dateRangeDropdown"
            data-bs-toggle="dropdown"
            aria-expanded="false"
          >
            Select Date Range
          </button>
          <!-- Add onclick function to dropdown items -->
<ul class="dropdown-menu" aria-labelledby="dateRangeDropdown">
  <li><a class="dropdown-item" href="#" onclick="fetchSalesData('daily')">Daily</a></li>
  <li><a class="dropdown-item" href="#" onclick="fetchSalesData('weekly')">Weekly</a></li>
  <li><a class="dropdown-item" href="#" onclick="fetchSalesData('monthly')">Monthly</a></li>
  <li><a class="dropdown-item" href="#" onclick="fetchSalesData('yearly')">Yearly</a></li>
</ul>
        </div>

        <!-- Div for Sales Chart -->
        <div class="sales-chart">
          <canvas id="salesChart" height="100"></canvas>
        </div>
      </main>

   <!-- Bootstrap modal for date range selection -->
<div
class="modal fade"
id="dateRangeModal"
tabindex="-1"
aria-labelledby="dateRangeModalLabel"
aria-hidden="true"
>
<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="dateRangeModalLabel">Date Range</h5>
            <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
            ></button>
        </div>
        <div class="modal-body">
            <form id="dateRangeForm" onsubmit="return false;">
                <div class="mb-3">
                    <label for="startDate" class="form-label">Start Date:</label>
                    <input
                        type="date"
                        class="form-control"
                        id="startDate"
                        required
                    />
                </div>
                <div class="mb-3">
                    <label for="endDate" class="form-label">End Date:</label>
                    <input
                        type="date"
                        class="form-control"
                        id="endDate"
                        required
                    />
                </div>
                <button type="button" class="btn btn-primary" onclick="downloadExcel()">Download Excel</button>
            </form>
        </div>
    </div>
</div>
</div>

    </section>
    <!-- CONTENT -->

    <!-- JavaScript section -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Include jQuery -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.0/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

   
    
    <script>
      $(document).ready(function () {
    // Fetch yearly sales data by default
    fetchSalesData('yearly');

    // Event listener for the download button
    $('.btn-download').click(function () {
        $('#dateRangeModal').modal('show');
    });
});

function downloadExcel() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    // Redirect to the backend endpoint to download the Excel file
    window.location.href = `/exportOrder?startDate=${startDate}&endDate=${endDate}`;
}

    </script>
     <script>

let salesChart;
     // Function to fetch sales data from backend based on type (daily, weekly, monthly, yearly)
     async function fetchSalesData(type) {
        try {
            const response = await fetch('/sales');
            const data = await response.json();
            // Process data based on the selected type
            processData(data.data, type);
            console.log(data.data)
        } catch (error) {
            console.error('Error fetching sales data:', error);
        }
    }

    // Function to process sales data and render chart
    function processData(data, type) {
        const chartData = {};
        // Process data based on the selected type
        if (type === 'daily') {
            // Process data for daily sales
            // Your code to process daily data here
            function getDaysInCurrentMonth() {
            const currentDate = new Date();
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth() + 1;

            // Get the last day of the current month
            const lastDayOfMonth = new Date(year, month, 0).getDate();

            return lastDayOfMonth;
        }

        const totaldays = getDaysInCurrentMonth();
        let ordersbyday = {};

        for (let i = 1; i <= totaldays; i++) {
            ordersbyday[i] = 0;
        }

        data.forEach((order) => {
            const dateObject = new Date(order._id);
            if (dateObject.getFullYear() == new Date().getFullYear()) {
                ordersbyday[dateObject.getDate()] += order.count
            }

        })
        renderChart(ordersbyday, '1')

        } else if (type === 'weekly') {
            // Process data for weekly sales
            // Your code to process weekly data here
          
        let ordersbyweek = {
            Sun:0,
            Mon:0,
            Tue:0,
            Wed:0,
            Thu:0,
            Fri:0,
            Sat:0,
        };
        data.forEach((order) => {
            
            const dateObject = new Date(order._id);
            if(dateObject.getMonth()== new Date().getMonth()){
                
                ordersbyweek[String(dateObject).slice(0,3)] += order.count;
            }
            
        })

        renderChart(ordersbyweek, '1')
  

        } else if (type === 'monthly') {
            // Process data for monthly sales
            // Your code to process monthly data here
            const labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        let ordersbymonth = {
            Jan: 0, Feb: 0, Mar: 0, Apr: 0, May: 0, Jun: 0, Jul: 0, Aug: 0, Sep: 0, Oct: 0, Nov: 0, Dec: 0
        }
        data.forEach((order) => {
            const dateObject = new Date(order._id);
            if (dateObject.getFullYear() == new Date().getFullYear()) {
                month = labels[dateObject.getMonth()]
                ordersbymonth[month] += order.count;
            }
        })


        if (type == "monthly") {
          renderChart(ordersbymonth, '1')
        } else {
          renderChart(ordersbymonth)
        }
        } else if (type === 'yearly') {
            // Process data for yearly sales
            // Your code to process yearly data here
           
        let ordersbyyear = {};
        data.forEach((order) => {
            const dateObject = new Date(order._id);

            if (!ordersbyyear[dateObject.getFullYear()]) {
                ordersbyyear[dateObject.getFullYear()] = order.count;
            } else {
                ordersbyyear[dateObject.getFullYear()] += order.count;
            }


        })
        // console.log(ordersbyyear);
        renderChart(ordersbyyear, '1')
        }
        data.forEach(item => {
            // Assuming productId is unique and can be used as labels
            chartData[item.productId] = item.totalQuantity;
        });
        // Render chart based on processed data
        renderChart(chartData);
    }

    // Function to render chart
    function renderChart(data) {

      if (salesChart) {
            salesChart.destroy();
        }

        // Create a new Chart instance
        const ctx = document.getElementById('salesChart').getContext('2d');
         salesChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Total Products Sold',
                    data: Object.values(data),
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // Event listener for the dropdown menu
    $(document).ready(function () {
        $('.dropdown-menu a.dropdown-item').click(function () {
            const type = $(this).data('type');
            fetchSalesData(type);
        });
    });

    // Call fetchSalesData function with default type
    fetchSalesData('yearly');
  </script>
  
    <script>
      $(document).ready(function () {
    // Fetch yearly sales data by default
    fetchSalesData('yearly');

    // Event listener for the download button
    $('.btn-download').click(function () {
        $('#dateRangeModal').modal('show');
    });
});

function downloadExcel() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    // Redirect to the backend endpoint to download the Excel file
    window.location.href = `/exportOrder?startDate=${startDate}&endDate=${endDate}`;
}

    </script>
  </body>
</html>
